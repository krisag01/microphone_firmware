               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]

                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck

               FwEmptyFunc:            ; Done
000b ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq

                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq

                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq

                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1

001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip

                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1

0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop

                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;




               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]

                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;




               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed




               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...




               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep




0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts

0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 00b9                         dw          #reading/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 00ba                         dw          #reading/execute
               pFwTaskTerminateFuncTable:
006a ---- 00eb                         dw          #reading/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)


               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: Reading"
               reading/cfg:
               reading/cfg/pAuxioASensorOut:
0075 ---- 0007                         dw          #7
0076 ---- 0006                         dw          #6
               reading/input:
               reading/output:
               reading/output/head:
0077 ---- 0000                         dw          #0
               reading/output/index:
0078 ---- 0000                         dw          #0
               reading/output/samples0:
0079 ---- 0000                         dw          #0
007a ---- 0000                         dw          #0
007b ---- 0000                         dw          #0
007c ---- 0000                         dw          #0
007d ---- 0000                         dw          #0
007e ---- 0000                         dw          #0
007f ---- 0000                         dw          #0
0080 ---- 0000                         dw          #0
0081 ---- 0000                         dw          #0
0082 ---- 0000                         dw          #0
0083 ---- 0000                         dw          #0
0084 ---- 0000                         dw          #0
0085 ---- 0000                         dw          #0
0086 ---- 0000                         dw          #0
0087 ---- 0000                         dw          #0
0088 ---- 0000                         dw          #0
0089 ---- 0000                         dw          #0
008a ---- 0000                         dw          #0
008b ---- 0000                         dw          #0
008c ---- 0000                         dw          #0
008d ---- 0000                         dw          #0
008e ---- 0000                         dw          #0
008f ---- 0000                         dw          #0
0090 ---- 0000                         dw          #0
0091 ---- 0000                         dw          #0
0092 ---- 0000                         dw          #0
0093 ---- 0000                         dw          #0
0094 ---- 0000                         dw          #0
0095 ---- 0000                         dw          #0
0096 ---- 0000                         dw          #0
0097 ---- 0000                         dw          #0
0098 ---- 0000                         dw          #0
               reading/output/samples1:
0099 ---- 0000                         dw          #0
009a ---- 0000                         dw          #0
009b ---- 0000                         dw          #0
009c ---- 0000                         dw          #0
009d ---- 0000                         dw          #0
009e ---- 0000                         dw          #0
009f ---- 0000                         dw          #0
00a0 ---- 0000                         dw          #0
00a1 ---- 0000                         dw          #0
00a2 ---- 0000                         dw          #0
00a3 ---- 0000                         dw          #0
00a4 ---- 0000                         dw          #0
00a5 ---- 0000                         dw          #0
00a6 ---- 0000                         dw          #0
00a7 ---- 0000                         dw          #0
00a8 ---- 0000                         dw          #0
00a9 ---- 0000                         dw          #0
00aa ---- 0000                         dw          #0
00ab ---- 0000                         dw          #0
00ac ---- 0000                         dw          #0
00ad ---- 0000                         dw          #0
00ae ---- 0000                         dw          #0
00af ---- 0000                         dw          #0
00b0 ---- 0000                         dw          #0
00b1 ---- 0000                         dw          #0
00b2 ---- 0000                         dw          #0
00b3 ---- 0000                         dw          #0
00b4 ---- 0000                         dw          #0
00b5 ---- 0000                         dw          #0
00b6 ---- 0000                         dw          #0
00b7 ---- 0000                         dw          #0
00b8 ---- 0000                         dw          #0
               reading/state:
               .segment end "Task: Reading"


               .segment begin "Task: Reading"
               reading/initialize:
               ;?
               reading/initializeDone:
00b9 ---- adb7                         rts




               reading/execute:
               ;? adcEnableSync(ADC_REF_VDDS_REL, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL);
00ba ---- 7009                         ld          R7, #((8 | (((3 < 6) & (!8)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
00bb ---- 1462                         jsr         AdiDdiAcquire
00bc ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
00bd 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
00bf ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0137:
00c0 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
00c1 ---- a6fe                         biob0       /id0137
00c2 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
00c3 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
00c4 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
00c5 ---- 7018                         ld          R7, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
00c6 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00c7 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
00c8 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00c9 ---- fd47                         nop
00ca ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00cb ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? // Select and read mic 0
               ;? adcSelectGpioInput(cfg.pAuxioASensorOut[0]);
00cc ---- 7875                         ld          R7, [#(reading/cfg/pAuxioASensorOut + 0)]
00cd ---- 14ec                         jsr         AdccompbSelectGpioInput
               ;?
               ;? // if (output.head == 0){
               ;? //    fwGenQuickAlertInterrupt();
               ;? // }
               ;?
               ;? U16 n=output.head;
00ce ---- 0877                         ld          R0, [#reading/output/head]
               ;?
               ;? adcGenManualTrigger();
00cf ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(output.samples0[n]);
00d0 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00d1 ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
00d2 ---- fdb1                         wev1        #WEVSEL_PROG
00d3 ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
00d4 ---- 7079                         ld          R7, #(reading/output/samples0 + 0)
00d5 ---- ef3f                         st          R6, [R7+R0]
               ;?
               ;? // Select and read mic 1
               ;? adcSelectGpioInput(cfg.pAuxioASensorOut[1]);
00d6 ---- 7876                         ld          R7, [#(reading/cfg/pAuxioASensorOut + 1)]
00d7 ---- 14ec                         jsr         AdccompbSelectGpioInput
               ;? adcGenManualTrigger();
00d8 ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(output.samples1[n]);
00d9 ---- 601f                         ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00da ---- eb2c                         out         R6, [#IOP_EVCTL_SCEWEVSEL]
00db ---- fdb1                         wev1        #WEVSEL_PROG
00dc ---- e902                         in          R6, [#IOP_ANAIF_ADCFIFO]
00dd ---- 7099                         ld          R7, #(reading/output/samples1 + 0)
00de ---- ef3f                         st          R6, [R7+R0]
               ;?
               ;? // Increment buffer index
               ;? utilIncrAndWrap(n, BUFFER_SIZE; output.head);
00df ---- 8801                         add         R0, #1
00e0 ---- 8a20                         cmp         R0, #32
00e1 ---- be01                         bneq        /id0153
00e2 ---- 0000                         ld          R0, #0
               /id0153:
00e3 ---- 0c77                         st          R0, [#reading/output/head]
               ;?
               ;? output.index = output.index + 1;
00e4 ---- 0878                         ld          R0, [#reading/output/index]
00e5 ---- 8801                         add         R0, #1
00e6 ---- 0c78                         st          R0, [#reading/output/index]
               ;?
               ;? // Disable the ADC
               ;? adcDisable();
00e7 ---- 14f9                         jsr         AdcDisable
               ;?
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
00e8 ---- 0001                         ld          R0, #1
00e9 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               reading/executeDone:
00ea ---- adb7                         rts




               reading/terminate:
               ;?
               reading/terminateDone:
00eb ---- adb7                         rts
               .segment end "Task: Reading"


               .segment begin "Procedure Library"
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
00ec ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
00ed ---- 1462                         jsr         AdiDdiAcquire
00ee 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
00f0 ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]

                                       ; Connect the specified GPIO
00f1 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
00f3 ---- ed8f                         lsr         R6, R7
00f4 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]

                                       ; Ensure that it has taken effect
00f5 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00f6 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
00f7 ---- 1465                         jsr         AdiDdiRelease
00f8 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
00f9 ---- 1462                         jsr         AdiDdiAcquire
00fa ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
00fb ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]

                                       ; Assert reset and disable the ADC
00fc ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
00fd ---- fb54                         out         R7, [#IOP_ADICLR_ADC]

                                       ; Ensure that it has taken effect
00fe ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00ff ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0100 ---- 1465                         jsr         AdiDdiRelease

                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
0101 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]

                                       ; Disable the ADC data interface
0102 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]

0103 ---- adb7                         rts
               .segment end "Procedure Library"


; Generated by SLP-4V3VSV3 at 2025-08-29 01:03:43.367
